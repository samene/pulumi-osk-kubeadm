- name: Wait for nodes
  hosts: all
  gather_facts: false
  tasks:
  - name: Wait for system to become reachable over SSH
    wait_for_connection:
      delay: 30
      timeout: 180

- name: Common tasks
  hosts: all
  tags:
  - common
  any_errors_fatal: true
  become: true  
  tasks:
  - name: Update /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: "127.0.0.1 {{ansible_hostname}}"
    become: true
  - name: Install chrony
    become: true
    package:
      name: chrony
      state: present
  - name: Edit ntp.conf file to add primary and secondary ntp server
    template: src=./templates/chrony.conf.j2 dest=/etc/chrony/chrony.conf
    become: true
    when: ansible_os_family == 'Debian'
  - block:
    - name: Edit ntp.conf file to add primary and secondary ntp server
      template: src=./templates/chrony.conf.j2 dest=/etc/chrony.conf
      become: true
    - name: Disable SELinux (1/2)
      shell: setenforce 0
    - name: Disable SELinux (2/2)
      shell: sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
    - name: Disable firewall (1/2)
      shell: "systemctl stop firewalld || true"
    - name: Disable firewall (2/2)
      shell: "systemctl disable firewalld || true"
    - block:
      - name: Add repository
        yum_repository:
          name: "{{ item.name }}"
          description: "{{ item.description }}"
          baseurl: "{{ item.url }}"
          gpgcheck: false
        loop: "{{ packages }}"
        vars:
          packages:
          - {"name": "baseos", "description": "Base OS repository", "url": "http://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64"}
          - {"name": "docker", "description": "Docker repository", "url": "https://download.docker.com/linux/centos/7/x86_64/stable/"}
      when: ansible_distribution_major_version == '7'
    - block:
      - name: Add repository
        yum_repository:
          name: "{{ item.name }}"
          description: "{{ item.description }}"
          baseurl: "{{ item.url }}"
          gpgcheck: false
        loop: "{{ packages }}"
        vars:
          packages:
          - {"name": "baseos", "description": "Base OS repository", "url": "http://yum.oracle.com/repo/OracleLinux/OL8/baseos/latest/x86_64"}
          - {"name": "appstream", "description": "Appstream repository", "url": "http://yum.oracle.com/repo/OracleLinux/OL8/appstream/x86_64"}
          - {"name": "docker", "description": "Docker repository", "url": "https://download.docker.com/linux/centos/8/x86_64/stable/"}
      when: ansible_distribution_major_version == '8'
    when: ansible_os_family == 'RedHat'
  - name: Restart ntp
    service: name=chronyd state=restarted
    become: yes
  - name: Wait for ntp sync
    pause:
      seconds: 20

- name: Setup load balancer
  hosts: loadbalancer
  tags:
  - loadbalancer
  any_errors_fatal: true
  become: true
  tasks:
  - name: Install haproxy
    package:
      name: haproxy
  - name: Configure haproxy
    template: src=./templates/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg
  - name: Start haproxy service
    service:
      name: "haproxy"
      state: restarted

- name: Common tasks
  hosts: '!loadbalancer'
  tags:
  - k8s
  any_errors_fatal: true
  become: true
  tasks:
  - name: Install kernel modules
    community.general.modprobe:
      name: "{{item}}"
      state: present
    loop:
    - overlay
    - br_netfilter
  - name: Install kernel modules
    community.general.modprobe:
      name: "{{item}}"
      state: present
    loop:
    - iptable_nat
    - iptable_raw
    - iptable_mangle
    - iptable_filter
    - xt_REDIRECT
    - xt_conntrack
    - xt_owner
    - xt_tcpudp
    when: ansible_os_family == 'RedHat'
  - name: Configure sysctl
    sysctl:
      name: "{{item.name}}"
      value: "{{item.value}}"
      state: present
      reload: yes
    ignore_errors: true
    loop:
    - {name: net.ipv4.ip_forward, value: 1}
    - {name: net.bridge.bridge-nf-call-ip6tables, value: 1}
    - {name: net.bridge.bridge-nf-call-iptables, value: 1}
    - {name: kernel.pid_max, value: 4194303}
    - {name: fs.inotify.max_user_instances, value: 8192}
    - {name: fs.file-max, value: 1024000}
    - {name: net.ipv4.ip_local_port_range, value: "11000 65535"}
    - {name: net.ipv4.tcp_max_tw_buckets, value: 2000000}
    - {name: net.ipv4.tcp_tw_reuse, value: 1}
    - {name: net.ipv4.tcp_fin_timeout, value: 10}
    - {name: net.ipv4.tcp_slow_start_after_idle, value: 0}
    - {name: net.ipv4.tcp_low_latency, value: 1}
    - {name: net.core.somaxconn, value: 40960}
    - {name: net.netfilter.nf_conntrack_tcp_be_liberal, value: 1}
    loop_control:
      label: "{{ item.name }}"
  - name: Disable swap (1/2)
    shell: |
      swapoff -a
  - name: Disable swap (2/2)
    replace:
      path: /etc/fstab
      regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
      replace: '# \1'
  - block:
    - name: Remove conflicting packages
      apt:
        name: ['docker.io','docker-doc','docker-compose','podman-docker','containerd','runc']
        state: absent
      when: cri == 'docker'
    - name: Install pre-requisite packages
      apt:
        name: ['curl', 'apt-transport-https', 'ca-certificates', 'gpg', 'jq', 'xz-utils']
        update_cache: yes
    when: ansible_os_family == 'Debian'
  - block:
    - name: Remove conflicting packages
      yum:
        name: ['docker','docker-client','docker-client-latest','docker-common','docker-latest','docker-latest-logrotate','docker-logrotate','docker-engine']
        state: absent
      when: cri == 'docker'  
    - name: Install pre-requisite packages
      yum:
        name: ['curl','ca-certificates','iscsi-initiator-utils','gpg','jq']
        update_cache: yes
    - name: Install pre-requisite packages
      yum:
        name: ['iproute-tc']
        state: present
      when: ansible_distribution_major_version == '8'
    - name: Enable iscsid
      systemd:
        name: iscsid
        state: started
        enabled: yes
    when: ansible_os_family == 'RedHat'    
  - block:
    - name: Get apt key for kubernetes repo
      apt_key:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key"
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - name: Add kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        state: present
        filename: kubernetes
        update_cache: true
    - block:
      - name: Get apt key for docker-ce repo
        apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
      - name: Add docker repository
        apt_repository:
          repo: "deb https://download.docker.com/linux/ubuntu jammy stable"
          state: present
          filename: docker
          update_cache: true
      when: cri == 'docker'

    when: ansible_os_family == 'Debian'
  - block:
    - name: Add kubernetes yum repository
      yum_repository:
        name: kubernetes
        description: kubernetes repository
        baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/"
        gpgkey:
        - "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
        enabled: true
        exclude:
        - kubelet
        - kubeadm
        - kubectl
        - cri-tools 
        - kubernetes-cni
    when: ansible_os_family == 'RedHat'
  - block:
    - name: Install containerd
      package:
        name: containerd
        state: present
      register: install_containerd
    - name: Configure containerd (1/3)
      shell: "mkdir -p /etc/containerd && containerd config default | tee /etc/containerd/config.toml"
      args:
        creates: /etc/containerd/config.toml
    - name: Configure containerd (2/3)
      shell: "sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml"
    - name: Configure containerd (3/3)
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'disabled_plugins'
        state: absent
    - block:
        - name: add insecure registry
          blockinfile:
            path: /etc/containerd/config.toml
            insertafter: '.*registry\.configs.*'
            marker: "# insecure registry 1"
            block: |
              # insecure registry

                      [plugins."io.containerd.grpc.v1.cri".registry.configs."{{item}}".tls]
                        insecure_skip_verify = true

          loop: "{{insecure_registries | default([]) | flatten(1) }}"
        - name: add insecure registry
          blockinfile:
            path: /etc/containerd/config.toml
            insertafter: '.*registry\.mirrors.*'
            marker: "# insecure registry 2"          
            block: |
              # insecure registry

                      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{item}}"]
                        endpoint = ["http://{{item}}"]  

          loop: "{{insecure_registries | default([]) | flatten(1) }}"
      when: insecure_registries | default([]) | length > 0
    - name: Restart containerd
      systemd: 
        name: containerd
        state: restarted
        daemon_reload: true
        enabled: true
      when: install_containerd.changed
    when: cri =='containerd'

  - block:
    - name: Install docker
      package:
        name: ['docker-ce','docker-ce-cli','containerd.io','docker-buildx-plugin','docker-compose-plugin']
      register: install_docker
    - name: Configure docker
      lineinfile:
        path: /usr/lib/systemd/system/docker.service
        regexp: '^ExecStart='
        line: ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd
    - name: add insecure registry
      template: src=./templates/daemon.json.j2 dest=/etc/docker/daemon.json
      when: insecure_registries | default([]) | length > 0    
    - name: Restart docker
      systemd: 
        name: docker
        state: restarted
        daemon_reload: true
        enabled: true
      when: install_docker.changed
    when: cri == 'docker'

  - block:
    - name: Get latest version of kubernetes patch
      shell: "apt-cache show kubelet | grep 'Version: {{ kubernetes_version }}' | head -n 1 | awk '{print $NF}'"
      register: k8s_version
    - block:
      - name: Install cri-dockerd
        apt:
          deb: https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd_0.3.4.3-0.ubuntu-jammy_amd64.deb
        register: cri_docker
      - name: Restart cri-docker
        systemd: 
          name: cri-docker
          state: restarted
          daemon_reload: true
          enabled: true
        when: cri_docker.changed      
      when: "cri == 'docker' and kubernetes_version is version('1.24', '>=')"
    - name: Install kubernetes packages
      apt:
        update_cache: yes
        name: ['kubeadm={{ k8s_version.stdout }}','kubelet={{ k8s_version.stdout }}', 'kubectl={{ k8s_version.stdout }}']
    when: ansible_os_family == 'Debian'
  - block:
    - name: Get latest version of kubernetes patch
      shell: "yum --showduplicates list kubeadm --disableexcludes=kubernetes | grep '{{ kubernetes_version }}' | tail -n 1 | awk '{print $2}'"
      register: k8s_version
    - block:
      - name: Install cri-dockerd
        yum:
          name: https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd-0.3.4-3.el7.x86_64.rpm
          disable_gpg_check: true
        when: ansible_distribution_major_version == '7'
        register: cri_docker_7
      - name: Install cri-dockerd
        yum:
          name: https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd-0.3.4-3.el8.x86_64.rpm
          disable_gpg_check: true
        when: ansible_distribution_major_version == '8'
        register: cri_docker_8
      - name: Restart cri-docker
        systemd: 
          name: cri-docker
          state: restarted
          daemon_reload: true
          enabled: true
        when: (cri_docker_7 is defined and cri_docker_7.changed) or (cri_docker_8 is defined and cri_docker_8.changed)
      when: "cri == 'docker' and kubernetes_version is version('1.24', '>=')"      
    - name: Install kubernetes packages
      yum:
        name: ['kubeadm-{{ k8s_version.stdout }}','kubelet-{{ k8s_version.stdout }}', 'kubectl-{{ k8s_version.stdout }}']
        disable_excludes: kubernetes
    when: ansible_os_family == 'RedHat'
  - name: Start kubelet
    systemd:
      name: kubelet
      state: started
      enabled: true

- name: Control plane
  hosts: master[0]
  tags:
  - controlplane
  any_errors_fatal: true
  become: true
  tasks:
  - shell: "kubeadm certs certificate-key"
    register: cert_key
  - set_fact:
      certificate_key: "{{ cert_key.stdout }}"
      cp_endpoint: "{% if groups['loadbalancer']|length > 0 %}{{hostvars[groups['loadbalancer'][0]].public_ip}}{% else %}{{ hostvars[groups['master'][0]].public_ip}}{% endif %}"
  - set_fact:
      extra_args: "{% if cni == 'cilium' %}--skip-phases=addon/kube-proxy{% endif %}"
  - name: Create cluster configuration
    template: src=./templates/k8s-configuration.yml.j2 dest=/tmp/k8s-configuration.yml
  - name: Init
    shell: "kubeadm init {{ extra_args }} --upload-certs --config /tmp/k8s-configuration.yml"
    args:
      creates: /etc/kubernetes/admin.conf
  - name: Get join command for control plane
    shell: "kubeadm token create --print-join-command --certificate-key {{ certificate_key }}"
    register: joincommand_cp
  - name: Get join command for workers
    shell: kubeadm token create --print-join-command
    register: joincommand_worker
  - name: Save join command - control plane
    local_action:
      module: copy
      dest: /tmp/join-command-{{clustername}}-cp
      content: "{{joincommand_cp.stdout}}"
    become: false
  - name: Save join command - worker
    local_action:
      module: copy
      dest: /tmp/join-command-{{clustername}}-worker
      content: "{{joincommand_worker.stdout}}"
    become: false

- name: Control plane - HA
  hosts: master
  any_errors_fatal: true
  tags:
  - controlplane
  become: true
  tasks:
  - set_fact:
      extra_args: "{% if kubernetes_version is version('1.24', '>=') and cri == 'docker' %}--cri-socket=unix:///var/run/cri-dockerd.sock{% endif %}"  
  - name: Get join command
    set_fact:
      joincmd: "{{ lookup('file', '/tmp/join-command-{{clustername}}-cp') }} {{ extra_args }}"
    become: false
    run_once: true
  - name: Join cluster - HA control plane
    shell: "{{joincmd}}"
    args:
      creates: /etc/kubernetes/kubelet.conf

- name: CNI and metrics-server
  hosts: master[0]
  tags:
  - cni
  - controlplane
  any_errors_fatal: true
  become: true
  tasks:
  - name: Move kubeconfig
    shell: "mkdir -p {{ansible_env.HOME}}/.kube && cp /etc/kubernetes/admin.conf {{ansible_env.HOME}}/.kube/config && chown {{ansible_user}}:{{ansible_user}} {{ansible_env.HOME}}/.kube/config"
    args:
      creates: "{{ansible_env.HOME}}/.kube/config"

  - block:

    - name: Untaint master if only 1 node cluster
      shell: "kubectl taint node $(kubectl get nodes -o json | jq -r '.items[0].metadata.name') node-role.kubernetes.io/master:NoSchedule-"
      failed_when: false
    - name: Untaint master if only 1 node cluster
      shell: "kubectl taint node $(kubectl get nodes -o json | jq -r '.items[0].metadata.name') node-role.kubernetes.io/control-plane:NoSchedule-"
      failed_when: false

    when: "groups['worker']|length == 0" 

  - name: Fetch kubeconfig
    fetch:
      src: "{{ansible_env.HOME}}/.kube/config"
      dest: cluster-{{clustername}}.kubeconfig
      flat: true

  - name: Change cluster and context name
    local_action: 
      module: shell
      _raw_params: "sed -i 's/kubernetes/{{clustername}}/g' cluster-{{clustername}}.kubeconfig"
    ignore_errors: true
    become: false
    no_log: true

  - name: Copy manifests
    copy:
      src: "./files/{{item}}"
      dest: "/tmp/{{item}}"
    loop:
    - metrics-server.yaml
    - kube-flannel.yml
    - kube-flannel-rbac.yml
    - kube-flannel-latest.yml

  - block:

    - name: Install Flannel CNI (1/2)
      shell: "kubectl apply -f /tmp/kube-flannel-rbac.yml"
      when: kubernetes_version is version('1.24', '<')

    - name: Install Flannel CNI (2/2)
      shell: "kubectl apply -f /tmp/kube-flannel.yml"
      when: kubernetes_version is version('1.24', '<')

    - name: Install Flannel CNI (1/1)
      shell: "kubectl apply -f /tmp/kube-flannel-latest.yml"
      when: kubernetes_version is version('1.24', '>=')

    when: "cni == 'flannel'"

  - block:

    - name: Check for already installed CNI
      shell: "kubectl get daemonset cilium  -n kube-system -o jsonpath='{.status.numberReady}' --ignore-not-found=true"
      register: ds
    - block:
      - set_fact:
          cp_endpoint: "{% if groups['loadbalancer']|length > 0 %}{{hostvars[groups['loadbalancer'][0]].public_ip}}{% else %}{{hostvars[groups['master'][0]].ansible_default_ipv4.address}}{% endif %}"
      - name: Download Cilium CNI
        get_url:
          url: "https://github.com/cilium/cilium-cli/releases/download/v0.14.6/cilium-linux-amd64.tar.gz"
          dest: /tmp/cilium-linux-amd64.tar.gz
      - name: Unpack Cilium CNI
        shell: "tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin"
        args:
          chdir: /tmp
          creates: /usr/local/bin/cilium
      - name: Install Cilium CNI
        shell: cilium install --helm-set kubeProxyReplacement=strict,k8sServiceHost={{cp_endpoint}},k8sServicePort=6443
      when: ds.stdout|int|default(0) == 0

    when: "cni == 'cilium'"

  - name: Install metrics server
    shell: kubectl apply -f /tmp/metrics-server.yaml

- name: Workers
  hosts: worker
  tags:
  - worker
  any_errors_fatal: true
  become: true
  tasks:
  - set_fact:
      extra_args: "{% if kubernetes_version is version('1.24', '>=') and cri == 'docker' %}--cri-socket=unix:///var/run/cri-dockerd.sock{% endif %}"
  - name: Get join command
    set_fact:
      joincmd: "{{ lookup('file', '/tmp/join-command-{{clustername}}-worker') }}"
    run_once: true
    become: false
  - name: Join cluster
    shell: "{{joincmd}} {{extra_args}}"
    args:
      creates: /etc/kubernetes/kubelet.conf
